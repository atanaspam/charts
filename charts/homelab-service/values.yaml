nameOverride: ""

topLevelDomain: example.com
# subDomain: ""
clusterName: k3s

ingress:
  create: true
  issuer:
    name: letsencrypt-staging-issuer
  defaultRoute:
    externalDns:
      enabled: true
    extraMiddlewares: []
    #  - name: keycloak-openid
    #    namespace: traefik
  extraRoutes: []
    # - match: "Host(`{{ include \"service.name\" . }}.{{ include \"cluster.fqdn\" . }}`)"
    #   certificateHostname: "{{ include \"service.name\" . }}.{{ include \"cluster.fqdn\" . }}"
    #   customMiddlewares:
    #     - name: https-redirectscheme
    #       namespace: traefik

databases: []
  # - name: "{{ $.Release.Name }}"
  #   owner: "{{ $.Release.Name }}-owner"
  #   targetClusterName: shared
  #   targetClusterNamespace: cnpg
  #   reclaimPolicy: retain

customMiddleware:
  definitions: []

replicaCount: 1
progressDeadlineSeconds: 600

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

podAnnotations: {}
podSecurityContext: {}

initContainers: []
container:
  image: ""
  imagePullPolicy: IfNotPresent
  command: []
  args: []
  # runtimeClassName: nvidia
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  volumeMounts:
    - mountPath: /config
      name: config
  env:
    - name: PUID
      value: "5000"
    - name: PGID
      value: "5000"
    - name: TZ
      value: "Europe/Amsterdam"

volumes:
  - name: config
    persistentVolumeClaim:
      claimName: config

persistentVolumeClaims:
  - name: config
    storageClassName: truenas-iscsi-csi-retained
    reclaimPolicy: Delete
    size: 1Gi
    annotations: {}

service:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 10
  periodSeconds: 30
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 10
  periodSeconds: 30

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

job:
  enabled: false
  name: job-name
  env: []
    # - name: PUID
    #   value: "5000"
  command: []
  args: []
  annotations: {}
    # argocd.argoproj.io/hook: PreSync
    # argocd.argoproj.io/hook-delete-policy: BeforeHookCreation

externalSecrets:
  - name: "{{ $.Release.Name }}"
    path: software/{{ $.Values.clusterName }}/{{ $.Release.Name }}
    refreshAfter: 300s

serviceAccount:
  create: false
  secret:
    create: false

clusterRole:
  rules: []

clusterRoleBinding: {}
  # role: "{{ $.Release.Name }}"
  # serviceAccount:
  #   name: "{{ $.Release.Name }}"
  #   namespace: "{{ $.Release.Namespace }}"

homepage:
  enabled: false
  name: "{{ $.Release.Name }}"
  icon: "{{ $.Release.Name }}"
  group: services
  weight: "10"

monitoring:
  serviceMonitor:
    create: false
    port: monitoring
    interval: 1m
    scrapeTimeout: 10s
  exportarr:
    create: false
    version: latest
    apiKeySecretName: "api_key"

extraObjects: []
